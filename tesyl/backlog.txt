Wrap Guards in () at parser?
Increment assignments
Unary expressions - minus and negate
Better tests of complex programs


Real tests - fib with while loop, function call when ready.


Tuple values - allow pair-wise computations for BinOps.

Add Operational Semantics document, and keep up to date.
Benchmark tests - Ackermann number.
Refactor and optimize code - use more rust built-in features.

Rewrite to Compiler
 - Inspiration from https://github.com/antoyo/tiger-rs/tree/master/tiger/src
 - Statements and expression instead of just expressions
 - Add types
    And do other static analysis
    Maybe minimal language and NonInterference for compiler afterwards?
    Can reuse lexer and parser I suppose
 Probably new MR - Keep Interpreter on Old MR - switch back and forth
 Maybe have both? Figure out - but main focus on writing compiler!

Need to experiment and test the IR generation of basic blocks.
Maybe write some LLVM simple programs (for addition) and compare.